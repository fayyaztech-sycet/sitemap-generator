<?php
/**
 * Site Map Generator
 *
 * @license    MIT
 */

namespace Fayyaztech\SitemapGenerator;

class SitemapGenerator
{
    /**
     * domain
     *
     * @var string
     */
    private $domain;

    /**
     * changeFrequency
     *
     * @var string
     */
    private $changeFrequency;

    /**
     * urlList
     *
     * @var array
     */
    private $urlList = [];

    /**
     * Method __construct
     *
     * @param string $domain [String]
     *
     * @return void
     */
    public function __construct(string $domain = '', string $changeFrequency = ChangeFrequency::DAILY)
    {
        $this->changeFrequency = $changeFrequency;
        // Use the null coalescing operator to set the domain
        $this->domain = filter_var($domain, FILTER_VALIDATE_URL) ? $domain : $this->getCurrentDomain();
        $this->getAllUrls();
    }

    /**
     * Method getCurrentDomain
     *
     * @return string [current domain name]
     */
    private function getCurrentDomain(): string
    {
        // Use $_SERVER['HTTP_HOST'] to get the current domain from the server environment
        $currentDomain = $_SERVER['HTTP_HOST'] ?? 'localhost';

        // If needed, you can further process the $currentDomain variable

        return $currentDomain;
    }

    private function getAllUrls()
    {
        $urlList = [];

        // Initialize cURL session
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->domain);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        $html = curl_exec($ch);
        curl_close($ch);

        // Create a DOMDocument object
        $dom = new \DOMDocument;
        libxml_use_internal_errors(true); // Disable libxml errors

        // Load HTML content into the DOMDocument
        $dom->loadHTML($html);

        // Get the base domain for comparison
        $baseDomain = parse_url($this->domain, PHP_URL_HOST);

        // Get all anchor tags (links) from the HTML
        $links = $dom->getElementsByTagName('a');

        // Iterate through each link and extract the href attribute
        foreach ($links as $link) {
            $href = $link->getAttribute('href');

            // Skip empty href attributes
            if (!empty($href)) {
                // Check if the href is a relative URL (starts with '/')
                if (strpos($href, '/') === 0) {
                    // Append to the base URL to construct the absolute URL
                    $absoluteURL = $this->domain . $href;

                    // Exclude file URLs
                    if (!pathinfo($absoluteURL, PATHINFO_EXTENSION)) {
                        // Exclude external domain URLs
                        if (parse_url($absoluteURL, PHP_URL_HOST) === $baseDomain) {
                            $urlList[] = $absoluteURL;
                        }
                    }
                } elseif (filter_var($href, FILTER_VALIDATE_URL)) {
                    // Exclude external domain URLs
                    if (parse_url($href, PHP_URL_HOST) === $baseDomain) {
                        $urlList[] = $href;
                    }
                }
            }
        }

        // Close libxml errors
        libxml_clear_errors();
        libxml_use_internal_errors(false);

        // Remove duplicate URLs
        $this->urlList = array_unique($urlList);
    }

    public function saveToSitemap($filePath = '.')
    {
        $xml = new \SimpleXMLElement(
            '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd"></urlset>'
        );

        // Add a comment indicating the sitemap is generated by Sublime Technologies
        // $comment = $xml->addChild('comment', 'Generated by Sublime Technologies');
        // $comment->addAttribute('id', 'comment');

        foreach ($this->urlList as $url) {
            $urlElement = $xml->addChild('url');
            $urlElement->addChild('loc', htmlspecialchars($url));
            $urlElement->addChild('lastmod', date('c'));
            $urlElement->addChild('changefreq', $this->changeFrequency); // Use the provided change frequency
            $urlElement->addChild('priority', '0.80');
        }

        $xml->asXML($filePath . '/sitemap.xml');
    }

    /**
     * Method saveToRor
     *
     * @param $filePath $filePath [location of save file]
     *
     * @return void
     */
    public function saveToRor($filePath = '.')
    {
        $xml = new \SimpleXMLElement('<rss xmlns:ror="http://rorweb.com/0.1/" version="2.0"></rss>');
        $channel = $xml->addChild('channel');

        $channel->addChild('title', 'ROR Sitemap for ' . htmlspecialchars($this->domain));
        $channel->addChild('link', $this->domain);
        $channel->addChild('description', "ROR sitemap For" . $this->domain);


        foreach ($this->urlList as $url) {
            $item = $channel->addChild('item');
            $item->addChild('link', htmlspecialchars($url));

            // Extract title and description from the meta tags of each URL
            $metaTags = $this->getMetaTags($url);
            $item->addChild('title', htmlspecialchars($metaTags['title']));
            $item->addChild('description', htmlspecialchars($metaTags['description']));
            $item->addChild('ror:updatePeriod', $this->changeFrequency);
            $item->addChild('ror:sortOrder', '0');
            $item->addChild('ror:resourceOf', 'sitemap');
        }

        $xml->asXML($filePath . '/ror.xml');
    }

    /**
     * Method getMetaTags
     *
     * @param $url $url [url of perticular page]
     *
     * @return array
     */
    private function getMetaTags($url)
    {
        $metaTags = ['title' => '', 'description' => ''];

        $html = file_get_contents($url);

        if ($html !== false) {
            $doc = new \DOMDocument;
            libxml_use_internal_errors(true);
            $doc->loadHTML($html);
            libxml_clear_errors();

            $titleNode = $doc->getElementsByTagName('title')->item(0);
            if ($titleNode) {
                $metaTags['title'] = trim($titleNode->textContent);
            }

            $metaNodes = $doc->getElementsByTagName('meta');
            foreach ($metaNodes as $metaNode) {
                $name = $metaNode->getAttribute('name');
                $content = $metaNode->getAttribute('content');
                if ($name == 'description') {
                    $metaTags['description'] = $content;
                    break;
                }
            }
        }

        return $metaTags;
    }

    // save to html 
    public function saveToHtmlSitemap($filePath = '.')
    {
        $html = '<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>' . htmlspecialchars($this->domain) . ' Site Map - Generated by www.xml-sitemaps.com</title>
    <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport" />
    <style type="text/css">
        /* ... (your existing CSS styles) ... */
    </style>
</head>

<body>
    <div id="top">
        <nav>' . htmlspecialchars($this->domain) . ' HTML Site Map</nav>
        <h3>
            <span>Last updated: ' . date('Y, F d') . '<br />
                Total pages: ' . count($this->urlList) . '</span>
            <a href="' . htmlspecialchars($this->domain) . '">' . htmlspecialchars($this->domain) . ' Homepage</a>
        </h3>
    </div>
    <div id="cont">
        <ul class="level-0">';

        foreach ($this->urlList as $url) {
            $html .= '
            <li class="lpage"><a href="' . htmlspecialchars($url) . '" title="' . htmlspecialchars($url) . '">' . htmlspecialchars($url) . '</a></li>';
        }

        $html .= '
        </ul>
    </div>
    <div id="footer">
        Page created with <a target="_blank" href="https://www.sublimetechnologies.in">html sitemaps generator</a> | Copyright &copy; 2018-2024 www.sublimetechnologies.in
    </div>
</body>

</html>';

        file_put_contents($filePath . '/sitemap.html', $html);
    }


    // url list 
    function saveToUrlList($filePath = '.')
    {
        $content = implode(PHP_EOL, $this->urlList);
        file_put_contents($filePath . '/urllist.txt', $content);
    }
}
